package com.project.Fashion.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp; // For automatic timestamping

import java.time.LocalDateTime;

@Entity
@Table(name = "user_favorites",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = {"user_id", "product_id"}) // Ensures a user cannot favorite the same product multiple times
        }
)
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserFavorite {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY) // Lazy fetching is often good for performance
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    @CreationTimestamp // Automatically set when the entity is created
    @Column(name = "favorited_at", nullable = false, updatable = false)
    private LocalDateTime favoritedAt;

    // Constructors, Getters, and Setters will be generated by Lombok's @Data, @NoArgsConstructor, @AllArgsConstructor

    // Optional: Custom constructor if needed
    public UserFavorite(User user, Product product) {
        this.user = user;
        this.product = product;
        // 'favoritedAt' will be set automatically by @CreationTimestamp
    }
}
