spring.application.name=Fashion

#Configure Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/fashion
spring.datasource.username=postgres
spring.datasource.password=141414

# Hibernate settings
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.ddl-auto=none

# JWT Settings
# IMPORTANT: Use a strong, long, random secret key in a real application.
# For HS512, the key should ideally be 64 bytes (512 bits).
# Generate one using a secure random generator.
# Example (DO NOT USE THIS IN PRODUCTION, GENERATE YOUR OWN):
jwt.secret=YourVeryLongAndStrongAndRandomSecretKeyForHS512AlgorithmFashionProjectExampleKey12345
# JWT Expiration time in milliseconds, 3600000 equals 1 hour
jwt.expiration.ms=3600000


# Resilience4j Rate Limiter Configuration
# Example: Default API service rate limiter
resilience4j.ratelimiter.instances.defaultApiService.limitForPeriod=10
# Number of permits (requests) allowed in a period

resilience4j.ratelimiter.instances.defaultApiService.limitRefreshPeriod=1s
# The period duration (e.g., 1s for 1 second, 1m for 1 minute)

resilience4j.ratelimiter.instances.defaultApiService.timeoutDuration=0ms
# How long a thread should wait for a permission. 0ms means fail immediately if no permission.
# For API rate limiting, immediate failure (HTTP 429) is common.

# You can define more instances for different APIs if needed, e.g.:
# resilience4j.ratelimiter.instances.productReadApiService.limitForPeriod=100
# resilience4j.ratelimiter.instances.productReadApiService.limitRefreshPeriod=1s
# resilience4j.ratelimiter.instances.productReadApiService.timeoutDuration=0ms

